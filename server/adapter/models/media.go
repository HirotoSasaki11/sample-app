// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Media media
// swagger:model Media
type Media struct {

	// イメージ
	// Read Only: true
	ID string `json:"id,omitempty"`

	// ファイル名
	Name string `json:"name,omitempty"`

	// メディアタイプ
	// Enum: [image/png image/jpg image/jpeg image/gif]
	Type string `json:"type,omitempty"`

	// アップロード日
	UploadDate *string `json:"upload_date,omitempty"`

	// アップロードユーザUID
	UploadUser *string `json:"upload_user,omitempty"`

	// 画像URL
	// Read Only: true
	URL string `json:"url,omitempty"`
}

// Validate validates this media
func (m *Media) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mediaTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["image/png","image/jpg","image/jpeg","image/gif"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mediaTypeTypePropEnum = append(mediaTypeTypePropEnum, v)
	}
}

const (

	// MediaTypeImagePng captures enum value "image/png"
	MediaTypeImagePng string = "image/png"

	// MediaTypeImageJpg captures enum value "image/jpg"
	MediaTypeImageJpg string = "image/jpg"

	// MediaTypeImageJpeg captures enum value "image/jpeg"
	MediaTypeImageJpeg string = "image/jpeg"

	// MediaTypeImageGif captures enum value "image/gif"
	MediaTypeImageGif string = "image/gif"
)

// prop value enum
func (m *Media) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mediaTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Media) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Media) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Media) UnmarshalBinary(b []byte) error {
	var res Media
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
